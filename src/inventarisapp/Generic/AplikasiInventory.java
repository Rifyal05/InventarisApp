package inventarisapp.Generic;

/**
 *
 * @author rifial
 */
import java.awt.Desktop;
import java.awt.Font;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.logging.Logger;
import java.util.logging.Level;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.lang.reflect.InvocationTargetException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JTextField;
import java.util.List;
import java.util.stream.Collectors;

@SuppressWarnings("serial")
public class AplikasiInventory extends javax.swing.JFrame {

    private DefaultTableModel tableModel;

    public AplikasiInventory() {
        initComponents();

        this.setExtendedState(JFrame.MAXIMIZED_BOTH);

        initTableModel();
        Font tableFont = new Font("Arial", Font.PLAIN, 18);
        tabelinventaris.setFont(tableFont);
        tabelinventaris.setRowHeight(30);
        filter.removeAllItems();
        filter.addItem("Default");
        filter.addItem("Nama (A-Z)");
        filter.addItem("Nama (Z-A)");
        filter.addItem("Jumlah Terbanyak");
        filter.addItem("Jumlah Tersedikit");
        filter.addItem("Total Aset Terbanyak");
        filter.addItem("Total Aset Tersedikit");
        filter.addItem("Harga Satuan Tertinggi");
        filter.addItem("Harga Satuan Terendah");
        createDirectories(new File("C:\\moonproject-app\\data\\CSV"));
        File file = new File("C:\\moonproject-app\\data\\CSV\\inventaris.csv");
        if (!file.exists()) {
            try (PrintWriter writer = new PrintWriter(file)) {
                writer.println("Nama Barang,Jumlah,Harga Satuan,Total Aset");
            } catch (IOException e) {
            }
        }
        try {
            loadDataFromCSV("C:\\moonproject-app\\data\\CSV\\inventaris.csv", DataInventaris.class);
        } catch (IOException e) {
        }

        jTextField1.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                performSearch(DataInventaris.class);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                performSearch(DataInventaris.class);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                performSearch(DataInventaris.class);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initTableModel() {
        tableModel = (DefaultTableModel) tabelinventaris.getModel();
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        datainventaris = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        buttontambah = new javax.swing.JButton();
        buttonedit = new javax.swing.JButton();
        filter = new javax.swing.JComboBox<>();
        buttonhapus = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        buttonfilecsv = new javax.swing.JButton();
        importfile = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabelinventaris = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        totalbarang = new javax.swing.JLabel();
        totalaset = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setBackground(new java.awt.Color(51, 51, 51));

        datainventaris.setLayout(new java.awt.BorderLayout());

        jPanel9.setBackground(new java.awt.Color(102, 102, 102));

        buttontambah.setText("TAMBAH DATA");
        buttontambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttontambahActionPerformed(evt);
            }
        });

        buttonedit.setText("EDIT DATA");
        buttonedit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttoneditActionPerformed(evt);
            }
        });

        filter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pilihan 1", "Pilihan 2", "Pilihan 3" }));
        filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterActionPerformed(evt);
            }
        });

        buttonhapus.setText("HAPUS");
        buttonhapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonhapusActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 27)); // NOI18N
        jLabel1.setText("SELAMAT DATANG");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("FILTER : ");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("SEARCH(NAMA) :");

        buttonfilecsv.setText("FILE CSV");
        buttonfilecsv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonfilecsvActionPerformed(evt);
            }
        });

        importfile.setText("IMPORT");
        importfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importfileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 187, Short.MAX_VALUE)
                        .addComponent(importfile, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonfilecsv, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonedit, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(buttontambah, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonhapus, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(filter, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonhapus, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttontambah, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonedit, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonfilecsv, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(importfile, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                        .addContainerGap(28, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)))
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filter, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(14, 14, 14))
        );

        datainventaris.add(jPanel9, java.awt.BorderLayout.PAGE_START);

        jScrollPane3.setBackground(new java.awt.Color(204, 204, 204));
        jScrollPane3.setPreferredSize(new java.awt.Dimension(456, 800));

        tabelinventaris.setBackground(new java.awt.Color(153, 153, 153));
        tabelinventaris.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "NAMA BARANG", "JUMLAH", "HARGA SATUAN", "TOTAL ASET"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelinventaris.setRowHeight(50);
        tabelinventaris.setShowGrid(true);
        jScrollPane3.setViewportView(tabelinventaris);

        datainventaris.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("DATA INVENTARIS", datainventaris);

        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.PAGE_START);

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel5.setText("TOTAL JUMLAH BARANG :");

        totalbarang.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        totalbarang.setText("TOTAL JUMLAH");

        totalaset.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        totalaset.setText("JUMLAH ASET");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel9.setText("TOTAL JUMLAH ASET :");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(totalbarang, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(totalaset, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(totalbarang, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(totalaset, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(80, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jMenu1.setText("HALAMAN INFORMASI INVENTARIS");
        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void importfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importfileActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter2 = new FileNameExtensionFilter("CSV Files", "csv");
        fileChooser.setFileFilter(filter2);
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            int confirm = JOptionPane.showConfirmDialog(this, "Tindakan ini akan menambah data ke file CSV lama Anda.", "Konfirmasi", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                try {
                    List<DataInventaris> newData = readDataFromCSV(selectedFile.getAbsolutePath(), DataInventaris.class);
                    if (newData.isEmpty()) {
                        // Tampilkan dialog kesalahan jika newData kosong
                        JOptionPane.showMessageDialog(this, "File CSV yang dipilih memiliki format yang tidak sesuai.", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    List<DataInventaris> existingData = readDataFromCSV("C:\\moonproject-app\\data\\CSV\\inventaris.csv", DataInventaris.class);
                    existingData.addAll(newData);
                    saveDataToCSV(existingData, "C:\\moonproject-app\\data\\CSV\\inventaris.csv");
                    displayDataInTable(existingData);
                    JOptionPane.showMessageDialog(this, "Data berhasil ditambahkan ke file CSV.", "Sukses", JOptionPane.INFORMATION_MESSAGE);
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(this, "Gagal memproses file CSV: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_importfileActionPerformed

    private void buttonfilecsvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonfilecsvActionPerformed

        File directory = new File("C:\\moonproject-app\\data\\CSV");
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().open(directory);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Gagal membuka direktori: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Desktop API tidak didukung.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonfilecsvActionPerformed

    private void buttonhapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonhapusActionPerformed
        int selectedRow = tabelinventaris.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih baris yang ingin dihapus.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int option = JOptionPane.showConfirmDialog(this, "Apakah Anda yakin ingin menghapus data ini?", "Konfirmasi Hapus", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            DefaultTableModel model = (DefaultTableModel) tabelinventaris.getModel();
            model.removeRow(selectedRow);
            List<DataInventaris> dataList = new ArrayList<>();
            try {
                dataList = readDataFromCSV("C:\\moonproject-app\\data\\CSV\\inventaris.csv", DataInventaris.class);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Gagal membaca file CSV: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            dataList.remove(selectedRow);
            try {
                saveDataToCSV(dataList, "C:\\moonproject-app\\data\\CSV\\inventaris.csv");
                JOptionPane.showMessageDialog(this, "Data berhasil dihapus dan disimpan ke CSV!", "Sukses", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Gagal menyimpan ke CSV: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(AplikasiInventory.class.getName()).log(Level.SEVERE, null, e);
            }
        }
    }//GEN-LAST:event_buttonhapusActionPerformed

    private void filterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterActionPerformed
        @SuppressWarnings("unchecked")
        JComboBox<String> filterComboBox = (JComboBox<String>) evt.getSource();
        String selectedFilter = (String) filterComboBox.getSelectedItem();
        try {
            List<DataInventaris> dataList = readDataFromCSV("C:\\moonproject-app\\data\\CSV\\inventaris.csv", DataInventaris.class);
            if (selectedFilter != null) {
                switch (selectedFilter) {
                    case "Nama (A-Z)" ->
                        Collections.sort(dataList, Comparator.comparing(DataInventaris::getNamaBarang));
                    case "Nama (Z-A)" ->
                        Collections.sort(dataList, Comparator.comparing(DataInventaris::getNamaBarang).reversed());
                    case "Jumlah Terbanyak" ->
                        Collections.sort(dataList, Comparator.comparingInt(DataInventaris::getJumlah).reversed());
                    case "Jumlah Tersedikit" ->
                        Collections.sort(dataList, Comparator.comparingInt(DataInventaris::getJumlah));
                    case "Total Aset Terbanyak" ->
                        Collections.sort(dataList, Comparator.comparingDouble(DataInventaris::getTotalAset).reversed());
                    case "Total Aset Tersedikit" ->
                        Collections.sort(dataList, Comparator.comparingDouble(DataInventaris::getTotalAset));
                    case "Harga Satuan Tertinggi" ->
                        Collections.sort(dataList, Comparator.comparingDouble(DataInventaris::getHargaSatuan).reversed());
                    case "Harga Satuan Terendah" ->
                        Collections.sort(dataList, Comparator.comparingDouble(DataInventaris::getHargaSatuan));
                    default -> {
                    }
                }
            }
            displayDataInTable(dataList);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Gagal membaca file CSV: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_filterActionPerformed

    private void buttoneditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttoneditActionPerformed
        int selectedRow = tabelinventaris.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih baris yang ingin diedit.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tabelinventaris.getModel();
        String namaBarang = (String) model.getValueAt(selectedRow, 0);
        int jumlah = (int) model.getValueAt(selectedRow, 1);
        double hargaSatuan = Double.parseDouble(model.getValueAt(selectedRow, 2).toString().replaceAll(",", ""));
        JTextField namaBarangField = new JTextField(namaBarang);
        JTextField jumlahField = new JTextField(String.valueOf(jumlah));
        JTextField hargaSatuanField = new JTextField(String.valueOf(hargaSatuan));
        Object[] message = {
            "Nama Barang:", namaBarangField,
            "Jumlah:", jumlahField,
            "Harga Satuan:", hargaSatuanField
        };
        int option = JOptionPane.showConfirmDialog(this, message, "Edit Data", JOptionPane.OK_CANCEL_OPTION);
        if (option == JOptionPane.OK_OPTION) {
            try {
                String newNamaBarang = namaBarangField.getText();
                int newJumlah = Integer.parseInt(jumlahField.getText());
                double newHargaSatuan = Double.parseDouble(hargaSatuanField.getText());
                double newTotalAset = newJumlah * newHargaSatuan;
                model.setValueAt(newNamaBarang, selectedRow, 0);
                model.setValueAt(newJumlah, selectedRow, 1);
                model.setValueAt(newHargaSatuan, selectedRow, 2);
                model.setValueAt(newTotalAset, selectedRow, 3);
                List<DataInventaris> dataList = new ArrayList<>();
                try {
                    dataList = readDataFromCSV("C:\\moonproject-app\\data\\CSV\\inventaris.csv", DataInventaris.class);
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(this, "Gagal membaca file CSV: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
                dataList.set(selectedRow, new DataInventaris(newNamaBarang, newJumlah, newHargaSatuan, newTotalAset));
                try {
                    saveDataToCSV(dataList, "C:\\moonproject-app\\data\\CSV\\inventaris.csv");
                    JOptionPane.showMessageDialog(this, "Data berhasil diubah dan disimpan ke CSV!", "Sukses", JOptionPane.INFORMATION_MESSAGE);
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(this, "Gagal menyimpan ke CSV: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(AplikasiInventory.class.getName()).log(Level.SEVERE, null, e);
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Masukkan angka yang valid untuk Jumlah dan Harga Satuan.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_buttoneditActionPerformed

    private void buttontambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttontambahActionPerformed
        JTextField namaBarangField = new JTextField();
        JTextField jumlahField = new JTextField();
        JTextField hargaSatuanField = new JTextField();
        Object[] message = {
            "Nama Barang:", namaBarangField,
            "Jumlah:", jumlahField,
            "Harga Satuan:", hargaSatuanField
        };
        int option = JOptionPane.showConfirmDialog(this, message, "Tambah Data", JOptionPane.OK_CANCEL_OPTION);
        if (option == JOptionPane.OK_OPTION) {
            try {
                String namaBarang = namaBarangField.getText();
                int jumlah = Integer.parseInt(jumlahField.getText());
                double hargaSatuan = Double.parseDouble(hargaSatuanField.getText());
                double totalAset = jumlah * hargaSatuan;
                DefaultTableModel model = (DefaultTableModel) tabelinventaris.getModel();
                model.addRow(new Object[]{namaBarang, jumlah, hargaSatuan, totalAset});
                createDirectories(new File("C:\\moonproject-app\\data\\CSV"));
                List<DataInventaris> dataList = new ArrayList<>();
                try {
                    dataList = readDataFromCSV("C:\\moonproject-app\\data\\CSV\\inventaris.csv", DataInventaris.class);
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(this, "Gagal membaca file CSV: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
                dataList.add(new DataInventaris(namaBarang, jumlah, hargaSatuan, totalAset));
                createDirectories(new File("C:\\moonproject-app\\data\\CSV"));
                try {
                    saveDataToCSV(dataList, "C:\\moonproject-app\\data\\CSV\\inventaris.csv");
                    JOptionPane.showMessageDialog(this, "Data berhasil ditambahkan dan disimpan ke CSV!", "Sukses", JOptionPane.INFORMATION_MESSAGE);
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(this, "Gagal menyimpan ke CSV: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(AplikasiInventory.class.getName()).log(Level.SEVERE, null, e);
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Masukkan angka yang valid untuk Jumlah dan Harga Satuan.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_buttontambahActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        JTextField searchField = (JTextField) evt.getSource();
        String searchText = searchField.getText().toLowerCase();
        try {
            List<DataInventaris> dataList = readDataFromCSV("C:\\moonproject-app\\data\\CSV\\inventaris.csv", DataInventaris.class);
            List<DataInventaris> filteredList = dataList.stream()
                    .filter(data -> data.getNamaBarang().toLowerCase().contains(searchText))
                    .collect(Collectors.toList());
            displayDataInTable(filteredList);

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Gagal membaca file CSV: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jTextField1ActionPerformed

    // GENERIC
    private <T extends DataInventaris> void performSearch(Class<T> clazz) {
        JTextField searchField = jTextField1;
        String searchText = searchField.getText().toLowerCase();

        try {
            List<T> dataList = readDataFromCSV("C:\\moonproject-app\\data\\CSV\\inventaris.csv", clazz);
            List<T> filteredList = dataList.stream()
                    .filter(data -> data.getNamaBarang().toLowerCase().contains(searchText))
                    .collect(Collectors.toList());

            displayDataInTable(filteredList);

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Gagal membaca file CSV: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // WILDCARD
    private void saveDataToCSV(List<? extends DataInventaris> dataList, String filePath) throws IOException {
        try (PrintWriter writer = new PrintWriter(new FileWriter(filePath))) {
            writer.println("Nama Barang,Jumlah,Harga Satuan,Total Aset");
            for (DataInventaris data : dataList) {
                writer.println(data.toCSVString());
            }
        }
    }

    private void createDirectories(Object dir) {
        if (dir instanceof File fileDir) {
            if (!fileDir.exists()) {
                if (!fileDir.mkdirs()) {
                    JOptionPane.showMessageDialog(this, "Gagal membuat direktori: " + fileDir.getAbsolutePath(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Objek bukan direktori.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // GENERIC
    private <T extends DataInventaris> List<T> readDataFromCSV(String filePath, Class<T> clazz) throws IOException {
        List<T> dataList = new ArrayList<>();
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            reader.readLine();
            while ((line = reader.readLine()) != null) {
                String[] values = line.split(",");
                if (values.length == 4) {
                    String namaBarang = values[0];
                    int jumlah = Integer.parseInt(values[1]);
                    double hargaSatuan = Double.parseDouble(values[2]);
                    double totalAset = Double.parseDouble(values[3]);
                    try {
                        T data = clazz.getDeclaredConstructor(String.class, int.class, double.class, double.class).newInstance(namaBarang, jumlah, hargaSatuan, totalAset);
                        dataList.add(data);
                    } catch (IllegalAccessException | IllegalArgumentException | InstantiationException | NoSuchMethodException | SecurityException | InvocationTargetException e) {
                    }
                }
            }
        }
        return dataList;
    }

    // GENERIC
    private <T extends DataInventaris> void loadDataFromCSV(String filePath, Class<T> clazz) throws IOException {
        List<T> dataList = readDataFromCSV(filePath, clazz);
        displayDataInTable(dataList);
    }

    // WILDCARD
    private void displayDataInTable(List<? extends DataInventaris> dataList) {
        tableModel.setRowCount(0);
        DecimalFormat df = new DecimalFormat("#,###");
        double totalAsetValue = 0;
        int totalBarangValue = 0;
        for (DataInventaris data : dataList) {
            Object[] rowData = {
                data.getNamaBarang(),
                data.getJumlah(),
                df.format(data.getHargaSatuan()),
                df.format(data.getTotalAset())
            };
            tableModel.addRow(rowData);
            totalAsetValue += data.getTotalAset();
            totalBarangValue += data.getJumlah();
        }
        totalaset.setText("Rp. " + df.format(totalAsetValue)+ ".00");
        totalbarang.setText(String.valueOf(totalBarangValue)+ " BARANG");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AplikasiInventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AplikasiInventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AplikasiInventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AplikasiInventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new AplikasiInventory().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonedit;
    private javax.swing.JButton buttonfilecsv;
    private javax.swing.JButton buttonhapus;
    private javax.swing.JButton buttontambah;
    private javax.swing.JPanel datainventaris;
    private javax.swing.JComboBox<String> filter;
    private javax.swing.JButton importfile;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTable tabelinventaris;
    private javax.swing.JLabel totalaset;
    private javax.swing.JLabel totalbarang;
    // End of variables declaration//GEN-END:variables

}
